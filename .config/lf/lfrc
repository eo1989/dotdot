# much of these new cmds were taken from rafi gh -> .com/rafi/.config
# interpreter for shell commands (needs to be POSIX compatible)
set shell /usr/local/bin/zsh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 6

set color256
set icons true
set ignorecase true
set hidden true
set incsearch true
set tabstop 2
set smartcase true
set dircounts true
set info size
set sortby natural
set ratios '1:2:3'
set sixel true
set preview true
# set previewer "/users/eo/.config/lf/lfpreview"
set previewer "/users/eo/lf-preview"
set drawbox true
set promptfmt "
\033[38;5;8m\033[48;5;236m %u@%h \033[38;5;236m\033[48;5;234m
\033[38;5;8m\033[48;5;234m %w/%f \033[0m\033[38;5;234m\033[0m
"
# use enter for shell commands
# map <enter> shell
# open machanisms
map <enter> open
map E &$OPENER $f
map o $mimeopen --ask $f
map O $mimeopen --ask-default $f

# dedicated keys for file opener actions
# map o &mimeopen $f
# map O $mimeopen --ask $f


# general utilities
# ---
map i $LESS='-iWQMXR~' bat --paging=always --theme="Sublime Snazzy" "$f"
map I push A<c-a>
map R rename
map D trash
map H cd ..
map . set hidden!

# create directory/file
map ad push $mkdir<space>
map af push $touch<space>
# map au !du -hsx * | sort -rh | less
map au !dust -si * |  less
map ai !gstat $f || stat $f; echo ; du -sh $f ; echo ; file --mime-type -b -p $f

# Quickly locate a file with fzf and select it in lf
map gf $lf -remote "send $id select $(fzf-tmux --query="$1" --select-1 --exit-0 --preview="bat --paging=always --theme='Sublime Snazzy'")"

map <esc> unselect; clear
map zz push :z<space>

map sn :{{ set sortby natural; set info size; set preview; }}
map sa :{{ set sortby natural; set info size; set nopreview; set ratios 3:5; }}
map ss :{{ set sortby size; set info size; set preview; }}
map st :{{ set sortby time; set info time; set preview; }}

# Tmux
map sg &tmux split-window -h lf
map sv &tmux split-window -v lf

# show documentation
map g? $lf -doc | less

# beyond compare selected files/directories
map = &bcompare $fx

# execute current fie (must be executable)
map x $$f
map X !$f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f >/dev/null 2>/dev/null & done;;
    esac
}}

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ $ans = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}l

# quickly cd into frecent directories using zoxide, zlua or rupa/z
cmd z ${{
	set +u
	dest=''
	prefix=''
	[[ "$OSTYPE" == "darwin"* ]] && prefix='/usr/local'
	if hash zoxide 2>/dev/null; then
		dest="$(zoxide query "$@")"
	# See: https://github.com/skywind3000/z.lua
	# elif [ -f "$prefix/etc/profile.d/z.lua" ]; then
	# 	export _ZL_NO_PROMPT_COMMAND=1
	# 	dest="$(lua "$prefix/etc/profile.d/z.lua" -e "$@")"
	# # See https://github.com/rupa/z
	# elif [ -f "$prefix/etc/profile.d/z.sh" ] || [ -f "$prefix/share/z/z.sh"]; then
	# 	export _Z_NO_PROMPT_COMMAND=1
	# 	source "$prefix/etc/profile.d/z.sh" || source "$prefix/share/z/z.sh"
	# 	dest="$(_z "$@" && pwd)"
	fi

	if test -n "${dest}"; then
		lf -remote "send $id cd '${dest}'"
	else
		lf -remote "send $id echo 'Invalid directory ${dest}'"
	fi
}}

cmd fzf_z ${{
	sel="$(zoxide query -l | fzf +s)"
	[ -d "$sel" ] && lf -remote "send $id cd \"$sel\""
}}

# dynamically set info displayed based on the number of columns
cmd resize %{{
	w=$(tmux display-message -p '#{pane_width}' || tput cols)
	# w=$(tput cols)
	if [ $w -le 62 ]; then
		lf -remote "send $id set ratios 1:4"
		lf -remote "send $id set nopreview"
	elif [ $w -le 80 ]; then
		lf -remote "send $id set ratios 1:2:2"
	elif [ $w -le 100 ]; then
		lf -remote "send $id set ratios 1:2:3"
	else
		lf -remote "send $id set ratios 2:4:5"
	fi
	# lf -remote "send $id echo 'ui adjusted for width of $w'"
}}
resize
# vim:set ft=sh
