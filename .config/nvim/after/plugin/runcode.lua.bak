-- local function run_file(cmd)
--   vim.cmd("update ")
--   local task = as.require('overseer').new_task({
--     cmd = cmd,
--     components = { 'unique', 'default' },
--   })
--   task:start()
--   local bufnr = task:get_bufnr()
--   if bufnr then
--     vim.cmd("botright split")
--     vim.api.nvim_win_set_buf(0, bufnr)
--   end
-- end

-- vim.cmd([[command! run_file :lua run_file()]])
-- vim.cmd([[command! -nargs=* Run_file :lua "run", \'<f-args>\']])

-- vim.keymap.set('n', '<F6>', '<cmd>run_file<CR>')
---------------------------------------------------------------------------------------------------\|
-- local exp = vim.fn.exp

local run_command_table = {
  python = "python3 -i %",
  julia = "julia -i %",
  lua = "lua %",
  c = "gcc -g -Wall % -o %:r && ./%:r",
  cpp = "g++ -g -Wall & -o %:r && ./%:r",
  java = 'cd %:h && javac *.java && java %:t:r',
  rust = 'cargo run',
  javascript = "node %",
}

-- local debug_command_table = {
--   ['cpp'] = 'g++ -g % -o %:r && gdb ./%:r',
--   ['c'] = 'gcc -g % -o %:r && gdb ./%:r',
--   ['python'] = 'python3 -c "import ipdb; set '
-- }

-- TODO: Change this to shellescape
local extra = 'echo \"\\\\n\\\\033[0;33mPress enter to continue \\\\033[0m\"; read; exit;'

-- run file w/ :Run or press <F#>
function Run_code()
  if (run_command_table[vim.bo.filetype]) then
    vim.cmd("2TermExec cmd='".. run_command_table[vim.bo.filetype] .."; " .. extra .."' direction = horizontal")
  else
    print("\nFiletype not supported\n")
  end
end


-- run file w/ :Run or press <F#>
--[[
function debug_code()
  if (debug_command_table[vim.bo.filetype]) then
    vim.cmd("2TermExec cmd='".. debug_command_table[vim.bo.filetype] .."; " .. extra .."' direction = horizontal")
  else
    print("\nFiletype not supported\n")
  end
end
]]

local function strsplt(inputstr)
  local t = {}
  for str in string.gmatch(inputstr, "([^\",\"]+)") do
    table.insert(t, str)
  end
  return t
end

-- Use the following function to update the execution command of a filetype temporarly
-- Usage :RunUpdate  --OR-- :RunUpdate filetype
-- If no argument is provided, the command is going to take the filetype of active buffer
function Update_command_table(type, ft)
  local command
  if (ft == "") then
    ft = vim.bo.filetype
  else
    ft = string.sub(ft, 2, -2)
  end

  ft = strsplt(ft)[1]

  if (type == 'run') then
    if (run_command_table[ft]) then
      command = vim.fn.input(string.format("Update run command of filetype (%s): ", ft), run_command_table[ft], 'file')
    else
      command = vim.fn.input(string.format("Add new run command of filetype (%s): ", ft))
    end
    if (#command ~= 0) then
      run_command_table[ft] = command
      print("  Updated!")
    end
  end
end

--   if (type == 'debug') then
--     if (debug_command_table[ft]) then
--       command = vim.fn.input(string.format("Update debug command of filetype (%s): ", ft), debug_command_table[ft], 'file')
--     else
--       command = vim.fn.input(string.format("Add new debug command of filetype (%s): ", ft))
--     end
--     if (#command ~= 0) then
--       debug_command_table[ft] = command
--       print("  Updated!")
--     end

vim.cmd([[command! Run :lua Run_code()]])
vim.cmd([[command! -nargs=* RunUpdate :lua Update_command_table("run", \'<f-args>\')]])

vim.keymap.set('n', '<F5>', '<cmd>Run<CR>')
