let g:mapleader = "\<Space>"

" source $HOME/.config/nvim/config/mapkeys.vim
source $HOME/.config/nvim/config/coc.vim
source $HOME/.config/nvim/config/fzf.vim
source $HOME/.config/nvim/config/tagbar.vim
source $HOME/.config/nvim/config/gitgutter.vim
source $HOME/.config/nvim/config/airline.vim
source $HOME/.config/nvim/config/webdevicons.vim

set mouse=a
set guifont=Fira\ Code-Retina
set nowrap
set shell=/usr/local/bin/zsh
set cmdheight=2
set expandtab
set ls=2
set switchbuf=useopen,split 	    " reveal already opened files from
		                	" the quick fix window instead of opening new buffers
set updatetime=300 	    " Speed up updatetime so gitgutter & friends are quicker
set timeoutlen=750
set ttimeoutlen=75
set novisualbell
set noerrorbells
set showmatch
set clipboard+=unnamed,unnamedplus
set gdefault
set hidden      " hide buffers instead of closing them, this means
			    " means that the current buffer can be put to background
			    " w/o being writtn; & that marks & undo hist are
			    " preserved
set tabstop=4
set shiftwidth=4
set softtabstop=4
" set fillchars+=vert:\┃
set smartcase
set ignorecase
" set fo-=c
" set fo-=r
" set fo-=o
set formatoptions+=1    " when wrapping paragraphs, dont end lines
			            " with 1-letter words (looks stupid)
set nobackup
set noundofile            " persistent undos - undo after u re-open the file
set noswapfile
set nowritebackup
set backspace=indent,eol,start
set colorcolumn=80
set signcolumn=auto:2
set list
set showtabline=2
set noshowmode
set textwidth=0
set wrapmargin=0
set foldenable
set foldmethod=marker
set splitbelow
set splitright
set winblend=5
set pumblend=5
set scrolloff=5
set maxmempattern=5000


"" Switching windows
" nnoremap <C-j> <C-w>j
" nnoremap <C-k> <C-w>k
" nnoremap <C-l> <C-w>l
" nnoremap <C-h> <C-w>h


let g:netrw_liststyle = 3
let g:netrw_banner = 0

" set title for kitty as it moves between windows with kitty-navigator
set title
set termguicolors
let g:nvcode_termcolors=256

" let g:loaded_python_provider = 0
" let g:loaded_python3_provider = 1
" changing python.plugin to python, to see if semshi loads correctly - 11/01
" let g:polyglot_disabled = ['sensible', 'cpp.plugin']
let g:semshi#mark_selected_nodes = 2
let g:semshi#always_update_all_highlights = v:true
let g:semshi#filetypes = ['Python']
let g:semshi#error_sign = v:false       " let lsp handle this


" let g:python_highlight_all = 1

" if has('nvim')
"     let g:python3_host_prog = '~/.pyenv/versions/3.8.2/envs/py3nvim-perm/bin/python' 
" endif

autocmd FileType json syntax match Comment +\/\/.\+$+
autocmd FileType vista,CHADTree,tagbar,undotree setlocal signcolumn=no

call plug#begin('~/.vim/plugged')
" Plug 'plasticboy/vim-markdown'
Plug 'RishabhRD/popfix'
Plug 'RishabhRD/nvim-cheat.sh'
Plug 'dbeniamine/cheat.sh-vim'
Plug 'myusuf3/numbers.vim'

Plug 'kassio/neoterm'
    au VimEnter,BufRead,BufNewFile *.jl set filetype=julia
    " just in case Julia acts up when running neoterm REPL
Plug 'rhysd/devdocs.vim'
Plug 'tyru/open-browser.vim'
Plug 'tyru/open-browser-github.vim'

Plug 'andymass/vim-matchup'

Plug 'michaeljsmith/vim-indent-object'

Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-line'
Plug 'GCBallesteros/vim-textobj-hydrogen'
Plug 'GCBallesteros/jupytext.vim'
    let g:jupytext_enabled = 1
    let g:jupytext_fmt = 'md'
    nmap ]x ctrih/^# %%<CR><CR>


" Plug 'mhinz/vim-grepper', {'on': 'GrepperRg'}

Plug 'mhinz/vim-startify'
" Plug 'liuchengxu/vim-which-key'
" Plug 'neomake/neomake'
" Plug 'glepnir/dashboard-nvim'
"     let g:dashboard_default_executive = 'fzf'
" Plug 'neovim/nvim-lspconfig'
" Plug 'nvim-lua/completion-nvim'
" Plug 'nvim-lua/lsp-status.nvim'
" Plug 'tjdevries/lsp_extensions.nvim'
" Plug 'vn-ki/coc-clap', {'do': function('clap#helper#build_all'), 'on': 'Clap'}

Plug 'tpope/vim-surround'
Plug 'machakann/vim-sandwich'
    runtime macros/sandwich/keymap/surround.vim

Plug 'jreybert/vimagit'
Plug 'rhysd/git-messenger.vim'
Plug 'airblade/vim-gitgutter'
    let g:gitgutter_signs = 1
    let g:gitgutter_map_keys = 0
    let g:gitgutter_eager = 1
    let g:gitgutter_realtime = 1
    let g:gitgutter_override_sign_column_highlight = 1
    let g:gitgutter_sign_added = ''
    let g:gitgutter_sign_modified = ''
    let g:gitgutter_sign_removed = ''
    let g:gitgutter_sign_removed_first_line = ''
    let g:gitgutter_sign_modified_removed = ''
Plug 'lambdalisue/vim-gista'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'

Plug 'jiangmiao/auto-pairs'
    let g:AutoPairsMultilineClose = 0
    let g:AutoPairsMapSpace = 0
    let g:AutoPairsFlyMode = 1
    let g:AutoPairsShortcutBackInsert = '<M-b>'
    let g:AutoPairsMapCR = 1
    let g:AutoPairsMapBS = 1

Plug 'mbbill/undotree', {'on': 'UndotreeToggle'}
    let g:undotree_WindowLayout = 2
    nnoremap <F7> :UndotreeToggle<CR>

Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'

Plug 'junegunn/vim-easy-align'
    vmap <Enter> <Plug>(EasyAlign)
    xmap ga      <Plug>(EasyAlign)
    nmap ga      <Plug>(EasyAlign)


Plug 'rrethy/vim-hexokinase', {'do': 'make hexokinase'}
    let g:Hexokinase_highlighters = ['foregroundfull']

Plug 'scrooloose/nerdcommenter'
    let g:NERDCustomDelimiters = {'json': {'left': '//'}}
    let g:NERDSpaceDelims = 1
    let g:NERDCompactSexyComs = 0
    let g:NERDDefaultAlign = 'left'
    let g:NERDTrimrailingWhiteSpace = 1

Plug 'majutsushi/tagbar', {'on': 'TagbarToggle'}
    let g:tagbar_ctags_bin = '/usr/local/bin/ctags'
    let g:tagbar_autofocus = 1
    nmap <F8> :TagbarToggle<CR>


Plug 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes'
Plug 'rizzatti/dash.vim', {'on': 'Dash'}

" Colorschemes
Plug 'embark-theme/vim', {'as': 'embark'}
Plug 'dracula/vim', {'as': 'Dracula'}
Plug 'patstockwell/vim-monokai-tasty', {'as': 'MonokaiTasty'}
Plug 'sonph/onehalf', {'rtp': 'vim', 'as': 'OneHalf'}

Plug 't9md/vim-choosewin'
    let g:choosewin_overlay_enable = 1
    nmap  -  <Plug>(choosewin)

Plug 'yuki-ycino/fzf-preview.vim', { 'branch': 'release/remote', 'do': ':UpdateRemotePlugins'}

Plug 'google/vim-searchindex'

Plug 'sbdchd/neoformat'

Plug 'luochen1990/rainbow' ", {'for': ['Bash', 'Zsh', 'Sh', 'Python', 'Julia']}
    let g:rainbow_active = 1


Plug 'easymotion/vim-easymotion'
    let g:EasyMotion_do_mapping = 0
    let g:EasyMotion_smartcase = 1
    """ EasyMotion default bindings
    "  map <Leader><Leader> <Plug>(easymotion-prefix)
    "  map <Leader>f        <Plug>(easymotion-bd-f)
    "  map <Leader>f        <Plug>(easymotion-overwin-f)
    " nmap s                <Plug>(easymotion-overwin-f2)
    "  map <Leader>L        <Plug>(easymotion-bd-jk)
    " nmap <Leader>L        <Plug>(easymotion-overwin-line)
    "  map <Leader>w        <Plug>(easymotion-bd-w)
    " nmap <Leader>w        <Plug>(easymotion-overwin-w)


Plug 'haya14busa/is.vim'
Plug 'Yggdroot/indentLine'

Plug 'hrsh7th/vim-vsnip'   | Plug 'hrsh7th/vim-vsnip-integ'
Plug 'seletskiy/ultisnips' | Plug 'honza/vim-snippets'


Plug 'psliwka/vim-smoothie', {'as': 'smoooth'}
Plug 'andrewradev/splitjoin.vim'

Plug 'tjdevries/nlua.nvim'

Plug 'numirias/semshi', {'do': ':UpdateRemotePlugins'}
Plug 'christianchiarulli/nvcode-color-schemes.vim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-treesitter/playground'
" Plug 'p00f/nvim-ts-rainbow'
" Plug 'nvim-treesitter/completion-treesitter'
" Plug 'bryall/contextprint.nvim'

Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'nvim-lua/popup.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-lua/telescope.nvim'

" get these two to work with CoC and/or LF
" Plug 'voldikss/fzf-floaterm'
" Plug 'voldikss/vim-floaterm'
"     let g:floaterm_autoclose = 2
    " let g:floaterm_keymap_toggle = '<Leader>fo'
    " let g:floaterm_keymap_kill = '<Leader>fc'

    " nnoremap <silent><Leader>fo  :FloatermToggle<CR>
    " tnoremap <silent> <F7> <C-\><C-n>:FloatermToggle<CR>

    " nnoremap <silent><Leader>fc  :FloatermKill<CR>
    " tnoremap <silent> <F8> <C-\><C-n>:FloatermKill<CR>
    " try w/ Coc & FZF

Plug 'ms-jpq/chadtree', {'branch': 'chad', 'do': 'python3 -m chadtree deps'}
    " nnoremap <leader>v <cmd>CHADopen --nofocus<CR>
             " nmap <F6> <cmd>CHADopen<CR>
    " lua vim.api.nvim_set_var("chadtree_settings", { use_icons = "emoji" })

    " hotkey clear quickfix list
    " nnoremap <leader>vc <cmd>call setqflist([])<CR>

Plug 'jpalardy/vim-slime', {'for': ['Python', 'Julia']}
    let g:slime_target = "neovim"

" Plug 'knubie/vim-kitty-navigator'
    " let &titlestring='%t - nvim'
    " let g:kitty_navigator_listening_on_address = "unix:/tmp/mykitty"


" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Clojure ~~~~~~~~~~~~~~~~~~~~~~~~~~~~{{{

Plug 'kovisoft/paredit', {'for': 'Clojure'}
    let g:paredit_smartjump = 1
Plug 'tpope/vim-fireplace', {'for': 'Clojure'}
Plug 'guns/vim-clojure-static', {'for': 'Clojure'}
    let g:clojure_maxlines = 60
    " set lispwords+=match
    let g:clojure_fuzzy_indent_patterns = ['^with', '^def', '^let']
Plug 'guns/vim-clojure-highlight', {'for': 'Clojure'}
Plug 'guns/vim-slamhound', {'for': 'Clojure'}
" }}}
"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Go! ~~~~~~~~~~~~~~~~~~~~~~~~~~~{{{

Plug 'fatih/vim-go', { 'for': 'Golang', 'do': ':GoInstallBinaries'}
" }}}
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Haskell ~~~~~~~~~~~~~~~~~~~~~~~~~~~~{{{

Plug 'neovimhaskell/haskell-vim', { 'for': 'Haskell' }
"}}}
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Julia ~~~~~~~~~~~~~~~~~~~~~~~~~~~~{{{

Plug 'JuliaEditorSupport/julia-vim'
    let g:julia_indent_align_import = 1
    let g:julia_indent_align_brackets = 1
    let g:julia_indent_align_funcargs = 1

" aug Julia
"     autocmd FileType julia nmap <silent> ? <Plug>(JuliaDocPrompt)
" aug END
" }}}
"~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Python ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Plug 'microsoft/vscode-python', {'for': 'Python'}

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Rust ~~~~~~~~~~~~~~~~~~~~~~~~~~~~{{{

Plug 'rust-lang/rust.vim', { 'for': 'Rust' }
Plug 'racer-rust/vim-racer', { 'for': 'Rust' }

" }}}
" ---------------------------- C++ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{{{

Plug 'jackguo380/vim-lsp-cxx-highlight', {'for': 'Cpp'}

" }}}



" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ TS/JS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~{{{

Plug 'leafgarland/typescript-vim', { 'for': 'typescript' }
Plug 'HerringtonDarkholme/yats.vim', { 'for': 'typescript' }
Plug 'MaxMellon/vim-jsx-pretty', {'for': 'javascript'}
Plug 'jelera/vim-javascript-syntax', { 'for': 'javascript' }
"}}}
Plug 'kyazdani42/nvim-web-devicons'
Plug 'akinsho/nvim-bufferline.lua'
Plug 'ryanoasis/vim-devicons'
" Plug 'sheerun/vim-polyglot'
call plug#end()



lua require'nvim-web-devicons'.setup()
lua require'bufferline'.setup()
" lua require('lsp')
" luafile require('tree')
" luafile ${HOME}/.config/nvim/lua/tree.lua
" luafile $HOME/.config/nvim/lua/repl.lua

colorscheme onedark
" colorscheme monokai_tasty
" set background=dark
highlight Comment cterm=italic
highlight link TSPunctBracket Normal
highlight SignColumn guibg=bg
highlight SignColumn ctermbg=bg
" hi LineNr ctermbg=NONE guibg=NONE
" if (has("termguicolors"))
"     set termguicolors
"     hi LineNr ctermbg=NONE guibg=NONE
" endif


augroup Python
  autocmd Filetype Python Semshi enable<CR>
augroup END

au! TermOpen * tnoremap <buffer> <C-c> <C-\><C-n>
" au! FileType fzf tunmap <buffer> <Esc>

let g:matchup_surround_enabled = 1
let g:matchup_matchparen_offscreen = 'popup'
let g:markdown_fenced_languages = [
            \ 'vim',
            \ 'help',
            \ 'lua',
            \ 'python',
            \ 'julia',
            \ 'go',
            \ 'rust']

let $NVIM_PYTHON_LOG_FILE="/tmp/nvim_log"
let $NVIM_PYTHON_LOG_LEVEL="DEBUG"


" Auto resize splits when nvim gets resized
"{{{
let g:startify_change_to_vcs_root = 1
let g:startify_lists = [
    \   {'type': 'dir'},
    \   {'type': 'files'},
    \   {'type': 'commands'},
    \   ]

" startify bookmarks
let g:startify_bookmarks = [
    \   {'v': '~/.config/nvim'},
    \   {'d': '~/'},
    \   ]

" startify commands
let g:startify_commands = [
    \   {'ch': ['Health Check', ':checkhealth']},
    \   {'ps': ['Plugins Status', ':PlugStatus']},
    \   {'pu': ['Update Plugins', ':PlugUpdate | PlugUpgrade']},
    \   {'uc': ['Update CocPlugins', ':CocUpdate']},
    \   {'h':  ['Help', ':help']},
    \   ]

" startify banner
let g:startify_custom_header = [
 \ '',
 \ '                                                    ▟▙            ',
 \ '                                                    ▝▘            ',
 \ '            ██▃▅▇█▆▖  ▗▟████▙▖   ▄████▄   ██▄  ▄██  ██  ▗▟█▆▄▄▆█▙▖',
 \ '            ██▛▔ ▝██  ██▄▄▄▄██  ██▛▔▔▜██  ▝██  ██▘  ██  ██▛▜██▛▜██',
 \ '            ██    ██  ██▀▀▀▀▀▘  ██▖  ▗██   ▜█▙▟█▛   ██  ██  ██  ██',
 \ '            ██    ██  ▜█▙▄▄▄▟▊  ▀██▙▟██▀   ▝████▘   ██  ██  ██  ██',
 \ '            ▀▀    ▀▀   ▝▀▀▀▀▀     ▀▀▀▀       ▀▀     ▀▀  ▀▀  ▀▀  ▀▀',
 \ '',
 \ '',
 \ '',
 \]

"}}}
" {{{ ------------------ vim go (polyglot) settings ------------------------"
" augroup golang
"     autocmd BufRead,BufEnter,BufWinLeave *.ext,*.ext3|<buffer[=N]> 
" augroup end
" let g:go_highlight_build_constraints = 1
" let g:go_highlight_extra_types = 1
" let g:go_highlight_fields = 1
" let g:go_highlight_functions = 1
" let g:go_highlight_methods = 1
" let g:go_highlight_operators = 1
" let g:go_highlight_structs = 1
" let g:go_highlight_types = 1
" let g:go_highlight_function_parameters = 1
" let g:go_highlight_function_calls = 1
" let g:go_highlight_generate_tags = 1
" let g:go_highlight_format_strings = 1
" let g:go_highlight_variable_declarations = 1
" let g:go_auto_sameids = 1
" }}}



let g:undotree_HighlightChangedWithSign = 1

" lua require('contextprint').setup({ separator_char = "#", include_class = true, include_function = true, include_method = true, include_if = true, include_for = true})
" nnoremap <leader>cp :lua require("contextprint").add_statement()<cr>
" nnoremap <leader>cp :lua require("contextprint").add_statement(true)<cr>

set shortmess+=Ic
set completeopt=noinsert,menuone,noselect
" set omnifunc=v:lua.vim.lsp.omnifunc
set wildignorecase
set wildmenu
set wildmode=longest,full
set wildoptions=pum
set wildignore+=*.o,*.obj,*.git,*.rbc,*/node_modules/,*.gem
set wildignore+=*.pyc,*.egg-info,*.pytest_cache,*.mypy_cache,*/__pycache__
set wildignore+=*.zip,*/tmp/**,*.DS_Store
set wildignore+=*.jpg,*.jpeg,*.png,*.gif


" " Quickly edit/reload the vimrc file
nmap <silent><Leader>re :so $MYVIMRC<CR>
nmap <silent><Leader>e  :e $MYVIMRC<CR>


" " nmap <F9> :Vista!!<CR>

noremap Y y$
" noremap <Leader>p "+gP<CR>
" noremap XX "+x<CR>
vnoremap x "_d

" greatest remap ever
vnoremap <leader>p "_dP

" jk | escaping!
inoremap kj <Esc>
xnoremap kj <Esc>
cnoremap jk <C-c>

" swap : for ;, no more shift!
nnoremap ; :

"Buffer nav
noremap <Leader>z :bp<CR>
noremap <Leader>x :bn<CR>
" Close Buffer
noremap <Leader>c :bd<CR>


" Splitting
noremap <Leader>hs :<C-u>split<CR>
noremap <Leader>vs :<C-u>vsplit<CR>

" " nnoremap <silent> <leader>sh :terminal<CR>
nnoremap <silent> <leader>sh :<C-u>split<CR> <cmd>Tnew<CR>

" Switching windows
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <C-h> <C-w>h

" Vmap for maintain Visual Mode after shifting > and <
xnoremap < <gv
xnoremap > >gv

"Move visual block
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv


" Julia ctags tagbar info
" let g:tagbar_type_julia = {
"             \ 'ctagstype': 'julia',
"             \ 'kinds'    : ['t: struct', 'f: function', 'm: macro', 'c: const']}

" " remmeber cursor pos.
augroup vimrc-remember-cursor-position
    autocmd!
    autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END




" {{{
"~~~~~~~~~~~~~~~~~~~~~~~~~~~~ WhichKey ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

"let g:maplocalleader = ','
"let g:which_key_sep = '→'
"set timeoutlen=900
"autocmd! User vim-which-key call which_key#register('<Space>', 'g:which_key_map')
"
"nnoremap <silent> <leader>      :<c-u>WhichKey '<Space>'<CR>
"nnoremap <silent> <localleader> :<c-u>WhichKey ','<CR>
"" Hide status line
"
"
"" This dict is necessary to provide group names/descript. text
"let g:which_key_map['w'] = {
"        \ 'name' : '+windows' ,
"        \ 'w' : ['<C-W>w'       , 'other-window']          ,
"        \ 'd' : ['<C-W>c'       , 'delete-window']         ,
"        \ '-' : ['<C-W>s'       , 'split-window-below']    ,
"        \ '|' : ['<C-W>v'       , 'split-window-right']    ,
"        \ '2' : ['<C-W>v'       , 'layout-double-columns'] ,
"        \ 'h' : ['<C-W>h'       , 'window-left']           ,
"        \ 'j' : ['<C-W>j'       , 'window-below']          ,
"        \ 'l' : ['<C-W>l'       , 'window-right']          ,
"        \ 'k' : ['<C-W>k'       , 'window-up']             ,
"        \ 'H' : ['<C-W>5<'      , 'expand-window-left']    ,
"        \ 'J' : [':resize +5'   , 'expand-window-below']   ,
"        \ 'L' : ['<C-W>5>'      , 'expand-window-right']   ,
"        \ 'K' : [':resize -5'   , 'expand-window-up']      ,
"        \ '=' : ['<C-W>='       , 'balance-window']        ,
"        \ 's' : ['<C-W>s'       , 'split-window-below']    ,
"        \ 'v' : ['<C-W>v'       , 'split-window-below']    ,
"        \ '?' : ['Windows'      , 'fzf-window']            ,
"        \ }
" }}}


" IndentLine
let g:indentLine_enabled = 1
let g:indentLine_concealcursor = 0
let g:indentLine_faster = 1
let g:indentLine_char_list = ['|', '¦', '┆', '┊']
let g:indentLine_color_term = 6
let g:indentLine_fileTypeExclude = ['startify', 'coc', 'help', 'dashboard',
                                  \ 'terminal', 'floaterm', 'vista',
                                  \ 'CHADTree', 'tagbar', 'undotree']

" {{{ "~~~~~~~~~~~~~~~~~~~~~~~~ vista.vim ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
" let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]
" let g:vista_default_executive = 'coc'
" let g:vista_echo_cursor_strategy = ['both']

" let g:vista_ctags_cmd = {
"     \ 'haskell': 'hasktags -x -o - -c',
"     \ 'go': 'gomodifytags',
"     \ 'python': 'ctags',
"     \}

" if exists('g:vista#renderer#icons') || exists('g:airline_powerline_fonts')
"     let g:vista#renderer#enable_icon = 1
"         let g:vista#renderer#icons = {
"         \ "function": "\uf794",
"         \ "variable": "\uf71b",
"         \}
" endif

" let g:vista_fzf_preview = ['right:60%:wrap']
" let g:vista_executive_for = {
"     \ 'cpp': 'coc-ccls',
"     \ 'py':  'coc-jedi',
"     \ 'rs':  'coc-rls',
"     \ 'lua': 'coc-nvim-lua',
"     \ 'go':  'coc-go',
"     \ 'hs':  'coc',
"     \ 'sh':  'coc-sh',
"     \}

" function! NearestMethodOrFunction() abort
"     return get(b:, 'vista_nearest_method_or_function', '')
" endfunction


" if exists("*NearestMethodOrFunction")
"     set statusline+=%{NearestMethodOrFunction()}
" endif
" to autmoatically show the nearetst fx in statusline automatically
" need to add this:
" autocmd VimEnter * call Vista#RunForNearestMethodOrFunction()

" let g:vista_log_file = expand('~/vista.log')
" }}}

"  ~~~~~~~~~~~~~~~~~~~~~~~~~~ Check lf and lazygit ~~~~~~~~~~~~~~~~~~~~~~"
" {{{ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ swap w/ ranger & tig? ~~~~~~~~~~~~~~~~~~~~"

" function! ToggleBorderTerm(cmd)
"   if empty(bufname(a:cmd))
"     call CreateCenteredFloatingWindow(0)
"     startinsert
"     call termopen(a:cmd, {'on_exit': function('OnTermExit')})
"   else
"     call DeleteUnlistedBuffers()
"   endif
" endfunction

" function! ToggleNoBorderTerm(cmd)
"   if empty(bufname(a:cmd))
"     call CreateCenteredFloatingWindow(1)
"     startinsert
"     call termopen(a:cmd, {'on_exit': function('OnTermExit')})
"   else
"     call DeleteUnlistedBuffers()
"   endif
" endfunction

" " LazyGit
" nnoremap <silent> <leader>tg :call ToggleLazyGit()<CR>
" function! ToggleLazyGit()
"   call ToggleNoBorderTerm('lazygit')
" endfunction

" nnoremap <silent> <Leader>tt :call ToggleGotop()<CR>
" function! ToggleGotop()
"   call ToggleNoBorderTerm('gotop')
" endfunction

" nnoremap <silent> <leader>tf :call ToggleLf()<CR>
" nnoremap <silent> <leader>cf :call ToggleCurrentFile()<CR>

" function! ToggleCurrentFile()
"   call ToggleNoBorderTerm('cd '.expand('%:p:h').' && lf')
" endfunction

" function! ToggleLf()
"   call ToggleNoBorderTerm('lf')
" endfunction

" nnoremap <silent> <leader>ts :call ToggleZsh()<CR>
" function ToggleZsh()
"   call ToggleNoBorderTerm('zsh')
" endfunction

" nnoremap <silent> <Leader>td :call DeleteUnlistedBuffers()<CR>

" function! OnTermExit(job_id, code, event) dict
"   if a:code == 0
"     call DeleteUnlistedBuffers()
"   endif
" endfunction

" function! RefocusFloatingWin()
"   wincmd p
"   startinsert
" endfunction
" }}}
" {{{ ~~~~~~~~~~~~~~~~~~~ Vim-Clap ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
" let g:clap_provider_dotfiles = {
"     \ 'source': ['~/.config/nvim/init.vim', '~/.zshrc', '~/.tmux.conf'],
"     \ 'sink': 'e',
"     \}

" let g:clap_provider_commands = {
"     \ 'source': ['Clap debug', 'UltiSnipsEdit'],
"     \ 'sink': { selected -> execute(selected, '')},
"     \}
" }}}
" {{{ ~~~~~ UltiSnips, Hs, Rs, Ts, Ale ~~~~~~~~~~~~~~~~~~~~"

" let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltisnipsListSnippets='<c-tab>'
" let g:UltiSnipsJumpForwardTrigger="<c-j>"
" let g:UltiSnipsJumpBackwardTrigger="<C-k>"
" let g:UltiSnipsEditSplit="context"

"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
" {{{ Haskell
" let g:haskell_conceal_wide = 1
" let g:haskell_multiline_strings = 1
"let g:necoghc_enable_detailed_browse = 1
"autocmd Filetype haskell setlocal omnifunc=necoghc#omnifunc
 "}}}

" {{{ Rust
" au FileType rust nmap gd <Plug>(rust-def)
" au FileType rust nmap gs <Plug>(rust-def-split)
" au FileType rust nmap gx <Plug>(rust-def-vertical)
" au FileType rust nmap <Leader>gd <Plug>(rust-doc)
" }}}
" TScript
" let g:yats_host_keyword = 1


"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ALE Linting~~~~~~~~~~~~~~~~~~~~~~~~~~"
" let g:ale_linters_explicit = 1
" let g:ale_linters = {'python': ['Pylint', 'flake8'], 'javascript': ['eslint']}
" let g:ale_fixers = {
" \   '*': ['remove_trailings_lines', 'trim_whitespace'],
" \   'javascript': ['prettier', 'eslint'],
" \   'python': ['black', 'autopep8', 'mypy']}
" let g:ale_lint_on_text_changed = 'never'
" let g:ale_lint_on_enter = 0
" let g:ale_lint_on_save = 0e
" }}}
