local vim = vim

vim.cmd [[autocmd BufEnter * lua require'completion'.on_attach()]]

-- diagnostic
vim.lsp.diagnostic.set_signs()
vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
    vim.lsp.diagnostic.on_publish_diagnostics, {
        virtual_text = {
            spacing = 4,
            prefix = "~",
        },
        -- This is similar to:
        -- let g:diagnostic_show_sign = 1
        -- To config sign display,
        -- see: ':h vim.lsp.diagnostic.set_signs()'
        signs = true,

        -- this is similar to:
        -- "let g:diagnostic_insert_delay = 1"
        update_in_insert = true,
      }
    )

-- icons
local w_sign = "⚠"
local e_sign = "☠"
local h_sign = "≻"

-- highlight
vim.fn.sign_define("LspDiagnosticsSignError", {text = e_sign, texthl = "LspDiagnosticsSignError"})
vim.fn.sign_define("LspDiagnosticsSignWarning", {text = w_sign, texthl = "LspDiagnosticsSignWarning"})
vim.fn.sign_define("LspDiagnosticsSignHint", {text = h_sign, texthl = "LspDiagnosticsSignHint"})

vim.cmd [[highlight! link LspDiagnosticsDefaultError Red]]
vim.cmd [[highlight! link LspDiagnosticsDefaultWarning Yellow]]
vim.cmd [[highlight! link LspDiagnosticsDefaultHint Green]]
vim.cmd [[highlight! link LspDiagnosticsDefaultInfomation Cyan]]

-- completion
local completion_chain_complete_list = {
  {
    ["complete_items"] = {"lsp", "buffer", "path"},
  }
}
vim.api.nvim_set_var("completion_chain_complete_list", completion_chain_complete_list)

-- keymap
local keymap_lsp_func = {
  gd = "definition()",
  gi = "implementation()",
  K  = "hover()",
  gr = "references()",
  gt = "rename()",
  gf = "formatting()",
}

local opts = { noremap=true, silent=true }
for k, v in pairs(keymap_lsp_func) do
  vim.api.nvim_set_keymap('n', k, string.format("<cmd>lua vim.lsp.buf.%s<CR>", v), opts)
end

local lspconfig = require'lspconfig'
local configs = require'lspconfig/configs'

--lua
--lua-language-server is installed by nvim
-- lspconfig.sumneko_lua.setup{}

-- lspconfig.pyls_ms.setup{}
-- lspconfig.pyls.setup{}
-- lspconfig.pyright.setup{}


--vim
--vim-language-server is installed by nvim
-- lspconfig.vimls.setup{}

--julia
--LanguageServer.jl is installed by nvim
-- lspconfig.julials.setup{}


-- Haskell
-- lspconfig.haskell-language-server.setup{}
-- if not lspconfig.haskell-language-server then
--   configs.haskell-language-server = {
--         default_config = {
--         cmd = {'haskell-language-server-wrapper', '--lsp'};
--         filetypes = {'haskell', 'hs', 'literate haskell', 'lhs'};
--         root_dir = function(fname)
--           return lspconfig.util.find_git_ancestor(fname) or vim.loop.os_homedir()
--         end;
--         settings = {}
--         }
--     }




--go
-- lspconfig.gopls.setup{}

--rust
-- lspconfig.rust_analyzer.setup{
--   cmd = {"rust-analyzer"}
-- }

--docker
--docker-langserver is installed by nvim
-- lspconfig.dockerls.setup{
--   cmd = {"docker-langserver", "--stdio"}
-- }

--yaml
--yaml-language-server is installed by nvim
-- lspconfig.yamlls.setup{
--   settings = {
--     yaml = {
--       schemaStore = {
--         enable = true
--       };
--     };
--   };
-- }

--bash
--bash-language-server is installed by nvim
-- lspconfig.bashls.setup{
--   cmd = {'bash-language-server start'};
--   filetypes = {"sh", "bash", "zsh"}
-- }

--typescript
--typescript-language-server is installed by nvim
-- lspconfig.tsserver.setup{}
